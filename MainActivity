package com.example.romitnagda.finalproject;

import android.app.Activity;
import android.media.MediaPlayer;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.widget.SeekBar;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Random;

import android.app.Activity;
import android.content.Intent;
import android.media.MediaPlayer;
import android.media.MediaPlayer.OnCompletionListener;
import android.os.Bundle;
import android.os.Handler;
import android.view.View;
import android.widget.ImageButton;
import android.widget.SeekBar;
import android.widget.TextView;
import android.widget.Toast;

public class MainActivity extends Activity
        implements MediaPlayer.OnCompletionListener, SeekBar.OnSeekBarChangeListener {

    private ImageButton Play;
    private ImageButton Next;
    private ImageButton Previous;
    private SeekBar progressBar;
    private TextView songTitleLabel;
    private TextView songCurrentTime;
    private TextView songTotalTime;
    private  MediaPlayer media;
    private Handler mHandler = new Handler();;
    private Reader songManager;
    private Utilities utils;
    private int currentSongIndex = 0;
    private ArrayList<Song> songsList = new ArrayList<Song>();

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Play = (ImageButton) findViewById(R.id.play);
        Next = (ImageButton) findViewById(R.id.skip);
        Previous = (ImageButton) findViewById(R.id.previous);
        progressBar = (SeekBar) findViewById(R.id.seekBar3);
        songTitleLabel = (TextView) findViewById(R.id.songTitle);
        songCurrentTime = (TextView) findViewById(R.id.songCurrentTime);
        songTotalTime = (TextView) findViewById(R.id.songTotalTime);

        media = new MediaPlayer();
        songManager = new Reader();
        utils = new Utilities();

        progressBar.setOnSeekBarChangeListener(this);
        media.setOnCompletionListener(this);

        songsList = songManager.getPlayList();

        if (songsList.size() > 0) {
            playSong(0);
        }

        Play.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (media.isPlaying()) {
                    if (media != null) {
                        media.pause();
                        Play.setImageResource(R.drawable.play);
                    }
                } else {
                    if (media != null) {
                        media.start();
                        Play.setImageResource(R.drawable.pause);
                    }
                }
            }
        });

        Next.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                // check if next song is there or not
                if (currentSongIndex < (songsList.size() - 1)) {
                    playSong(currentSongIndex + 1);
                    currentSongIndex = currentSongIndex + 1;
                } else {
                    if (songsList.size() > 0) {
                        playSong(0);
                    }
                    currentSongIndex = 0;
                }
            }
        });

        Previous.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View arg0) {
                if (currentSongIndex > 0) {
                    playSong(currentSongIndex - 1);
                    currentSongIndex = currentSongIndex - 1;
                } else {
                    if (songsList.size() > 0) {
                        playSong(songsList.size() - 1);
                        currentSongIndex = songsList.size() - 1;
                    }
                }

            }
        });
    }

    public void  playSong(int songIndex) {
            media.reset();
        try {
            media.setDataSource(songsList.get(songIndex).getPath());
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            media.prepare();
        } catch (IOException e) {
            e.printStackTrace();
        }
        media.start();

            String songTitle = songsList.get(songIndex).getTitle();
            songTitleLabel.setText(songTitle);

            Play.setImageResource(R.drawable.pause);

            progressBar.setProgress(0);
            progressBar.setMax(100);

            updateProgressBar();
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.menu, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.go_to_songs:
                Intent intent = new Intent(this, PlayListActivity.class);
                startActivity(intent);
                return true;
            default:
                return super.onOptionsItemSelected(item);
        }
    }

    public void updateProgressBar() {
        mHandler.postDelayed(mUpdateTimeTask, 100);
    }

    private Runnable mUpdateTimeTask = new Runnable() {
        public void run() {
            long totalDuration = media.getDuration();
            long currentDuration = media.getCurrentPosition();

            songTotalTime.setText(""+utils.milliSecondsToTimer(totalDuration));

            songCurrentTime.setText(""+utils.milliSecondsToTimer(currentDuration));

            int progress = (int)(utils.getProgressPercentage(currentDuration, totalDuration));
            progressBar.setProgress(progress);

            mHandler.postDelayed(this, 100);
        }
    };

  
    @Override
    public void onStartTrackingTouch(SeekBar seekBar) {
        // remove message Handler from updating progress bar
        mHandler.removeCallbacks(mUpdateTimeTask);
    }

    @Override
    public void onStopTrackingTouch(SeekBar seekBar) {
        mHandler.removeCallbacks(mUpdateTimeTask);
        int totalDuration = media.getDuration();
        int currentPosition = utils.progressToTimer(seekBar.getProgress(), totalDuration);

        // forward or backward to certain seconds
        media.seekTo(currentPosition);

        // update timer progress again
        updateProgressBar();
    }
    
    @Override
    public void onCompletion(MediaPlayer arg0) {
            if(currentSongIndex < (songsList.size() - 1)){
                playSong(currentSongIndex + 1);
                currentSongIndex = currentSongIndex + 1;
            }else{
                if (songsList.size() > 0) {
                    playSong(0);
                    currentSongIndex = 0;
                }
            }
        }

    @Override
    public void onDestroy(){
        super.onDestroy();
        media.release();
    }
}
